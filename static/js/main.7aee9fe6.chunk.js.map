{"version":3,"sources":["smirk.png","components/layout/Navbara.js","components/Joke.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbara","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","process","Toggle","aria-controls","Collapse","id","Nav","className","Link","Joke","useState","joke","setJoke","useEffect","fetchJoke","axios","get","headers","Accept","then","res","data","catch","err","console","log","Card","Header","Body","Text","Button","onClick","src","smirky","About","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,mC,kLCmB5BC,EAhBC,WACZ,OACI,6BACI,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,QACjE,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAMC,YAApB,UACA,kBAACP,EAAA,EAAOQ,OAAR,CAAeC,gBAAc,0BAC7B,kBAACT,EAAA,EAAOU,SAAR,CAAiBC,GAAG,yBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,CAAUR,KAAMC,iBAAhB,c,kECyBSQ,EA7BF,WAAO,IAAD,EAESC,mBAAS,IAFlB,mBAERC,EAFQ,KAEFC,EAFE,KAIfC,qBAAU,WACNC,MACD,IAEH,IAAMA,EAAY,WACdC,IACCC,IAAI,8BAA+B,CAACC,QAAS,CAACC,OAAQ,sBACtDC,MAAK,SAAAC,GAAG,OAAIR,EAAQQ,EAAIC,SACxBC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OAE9B,OACI,yBAAKhB,UAAU,qCACX,kBAACmB,EAAA,EAAD,CAAM7B,GAAG,SACnB,kBAAC6B,EAAA,EAAKC,OAAN,8BACA,kBAACD,EAAA,EAAKE,KAAN,KACE,kBAACF,EAAA,EAAKG,KAAN,CAAWtB,UAAU,YAClBI,EAAKA,MAER,kBAACmB,EAAA,EAAD,CAAQvB,UAAU,UAAUT,QAAQ,UAAUiC,QAASjB,GAAvD,+BAA8F,8BAAM,yBAAKP,UAAU,SAASyB,IAAKC,YCnBtHC,EARD,WACV,OACI,6BACI,2C,eCeGC,MAdf,WACE,OACE,kBAAC,IAAD,KACA,yBAAK5B,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,qBACf,kBAAC,IAAD,CAAO6B,OAAK,EAACC,KAAMpC,WAA8BqC,UAAW7B,IAC5D,kBAAC,IAAD,CAAO4B,KAAMpC,gBAAmCqC,UAAWJ,QCD7CK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEd/B,OAAM,SAAAgC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.7aee9fe6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/smirk.ccd93f39.png\";","import React from 'react'\r\nimport { Nav, Navbar } from 'react-bootstrap'\r\n\r\nconst Navbara = () => {\r\n    return (\r\n        <div>\r\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n  <Navbar.Brand href={process.env.PUBLIC_URL + '/'}>DJokes</Navbar.Brand>\r\n  <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n  <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n    <Nav className=\"mr-auto\">\r\n      <Nav.Link href={process.env.PUBLIC_URL + '/about'}>About</Nav.Link>\r\n    </Nav>\r\n  </Navbar.Collapse>\r\n</Navbar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbara;","import React, {useState, useEffect} from 'react';\r\nimport {Card, Button} from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport './joke.css';\r\nimport smirky from '../smirk.png';\r\n\r\n\r\nconst Joke = () => {\r\n    \r\n    const [joke, setJoke] = useState('');\r\n\r\n    useEffect(() =>{\r\n        fetchJoke();\r\n    }, []);\r\n\r\n    const fetchJoke = () => {\r\n        axios\r\n        .get('https://icanhazdadjoke.com/', {headers: {Accept: 'application/json'},})\r\n        .then(res => setJoke(res.data))\r\n        .catch(err => console.log(err))\r\n    }\r\n    return (\r\n        <div className=\"joke text-center font-weight-bold\">\r\n            <Card bg='light'>\r\n  <Card.Header>¯\\_(ツ)_/¯</Card.Header>\r\n  <Card.Body>\r\n    <Card.Text className=\"joketext\">\r\n      {joke.joke}\r\n    </Card.Text>\r\n    <Button className=\"jokebut\" variant=\"primary\" onClick={fetchJoke}>Hit me daddy one more time!!<span><img className=\"smirky\" src={smirky}/></span></Button>\r\n  </Card.Body>\r\n</Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Joke\r\n","import React from 'react'\r\n\r\nconst About = () => {\r\n    return (\r\n        <div>\r\n            <h1>D for Dad</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About\r\n","import React from 'react';\r\nimport Navbara from './components/layout/Navbara';\r\nimport Joke from './components/Joke';\r\nimport About from './components/pages/About';\r\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n    <div className=\"App\">\r\n      <Navbara />\r\n      <div className=\"container mx-auto\">\r\n      <Route exact path={process.env.PUBLIC_URL + '/'} component={Joke} />\r\n      <Route path={process.env.PUBLIC_URL + '/about'} component={About} />\r\n      </div>\r\n    </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}